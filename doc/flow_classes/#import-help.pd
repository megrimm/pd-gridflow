#N canvas 683 0 551 717 10;
#X msg 55 123 reset;
#X obj 13 59 bng 15 250 50 0 empty empty empty 0 -6 0 8 -24198 -1 -1
;
#X msg 13 123 200;
#X obj 13 100 until;
#X msg 13 79 230400;
#X obj 13 177 #out window;
#X text 7 248 GRID;
#X text 74 247 The argument establishes grid dimensions in parentheses
in the order of columns \, rows and grid dimensions.;
#X text 4 374 INTEGER;
#X text 5 438 SYMBOL;
#X text 76 437 Symbols are considered as a list of ascii characters.
;
#X text 7 464 LIST;
#X text 76 463 Like a sequence of ints sent one after another \, except
in a single message.;
#X text 7 499 MESSAGE;
#X text 76 496 "reset" aborts the current grid if there is one.;
#X text 6 551 GRID;
#X text 8 751 GRID;
#X text 80 751 The grid resulting from the incoming integers and/or
grids is output from the outlet.;
#X text 99 24 This object allows you to produce grids from non-grid
data \, such as integers and lists of integers. This object also reframes/resyncs
grids so that multiple grids may be joined together \, or single grids
may be split. That kind of operation is already done implicitly in
many cases (e.g. sending an integer or list to a grid-receiving inlet)
but using this object you have greater flexibility on the conversion.
;
#X text 77 551 This equivalent to filtering the grid through an [#export]
object. It is over ten times faster.;
#X msg 157 125 per_message;
#X msg 158 147 240 320 3;
#X text 75 374 Begins a new grid if there is no current grid. puts
that integer in the current grid. ends the grid if it is full. the
constructed grid is not stored: it is streamed. the stream is buffered
\, so the output is in packets of about a thousand numbers.;
#X text 7 640 MESSAGE;
#X text 81 639 "per message" : the grid will shape itself according
to the incoming data. Almost obsolete as sending a list to any grid
inlet will result in the same except the latter can not be cast to
other than int32.;
#X text 7 523 MESSAGE;
#X text 74 522 "to_ascii \$1" converts ints as decimal in ascii codes
;
#X obj 294 166 #import;
#X msg 294 144 to_ascii \$1;
#X floatatom 294 124 5 0 0 0 - - -;
#X obj 294 188 #print;
#X obj 0 0 doc_h;
#X obj 3 319 doc_i 2;
#X obj 13 149 #import (240 320 3);
#X obj 3 699 doc_o 1;
#X obj 3 220 doc_c 2;
#X text 10 285 NUMTYPE;
#X text 74 283 default: i;
#X obj 14 339 doc_ii 0;
#X obj 14 602 doc_ii 1;
#X obj 15 727 doc_oo 0;
#X connect 0 0 33 0;
#X connect 1 0 4 0;
#X connect 2 0 33 0;
#X connect 3 0 2 0;
#X connect 4 0 3 0;
#X connect 20 0 33 1;
#X connect 21 0 33 1;
#X connect 27 0 30 0;
#X connect 28 0 27 0;
#X connect 29 0 28 0;
#X connect 33 0 5 0;
