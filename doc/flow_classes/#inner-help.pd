#N canvas 666 0 568 672 10;
#X obj 0 0 doc_h;
#X obj 3 158 doc_c 1;
#X obj 3 218 doc_i 2;
#X obj 3 582 doc_o 1;
#X obj 14 188 doc_cc 0;
#X obj 14 248 doc_ii 0;
#X obj 14 550 doc_ii 1;
#X obj 14 612 doc_oo 0;
#X text 160 48 think of this one as a special combination of [#outer]
\, [#] and [#fold]. this is one of the most complex operations. It
is very useful for performing linear transforms like rotations \, scalings
\, shearings \, and some kinds of color remappings. A linear transform
is done by something called matrix multiplication \, which happens
to be [#inner * + 0]. [#inner] also does dot product and other funny
operations.;
#X text 200 248 Splits the Dim(anyA... \, lastA) left-hand grid into
Dim(anyA...) pieces of Dim(lastA) size.;
#X text 200 283 Splits the Dim(firstB \, anyB...) right-hand grid into
Dim(anyB...) pieces of Dim(firstB) size.;
#X text 200 318 On every piece pair \, does [#] using the specified
op_para operation \, followed by a [#fold] using the specified op_fold
operator and base value.;
#X text 200 388 creates a Dim(anyA... \, anyB...) grid by assembling
all the results together.;
#X text 200 423 (note: lastA must be equal to firstB.);
#X text 200 550 same as arg 0;
#X text 200 493 the operation that combines the values from the two
grids together. this defaults to "*" (as in the matrix product);
#X text 200 445 the operation that combines the result of the "op"
operations together. this defaults to "+" (as in the matrix product)
;
#X text 200 528 the base value for the fold;
#X obj 0 642 doc_f;
#X text 200 366 comment ca?;
#X obj 97 188 doc_m c0 grid;
#X obj 97 248 doc_m i0 grid;
#X obj 97 493 doc_m i0 op;
#X obj 97 528 doc_m i0 seed;
#X obj 97 550 doc_m i1 grid;
#X obj 97 612 doc_m o0 grid;
#X obj 97 445 doc_m i0 fold;
#X connect 21 1 9 0;
#X connect 21 1 10 0;
#X connect 21 1 11 0;
#X connect 21 1 12 0;
#X connect 21 1 13 0;
#X connect 21 1 19 0;
#X connect 22 1 15 0;
#X connect 23 1 17 0;
#X connect 24 1 14 0;
#X connect 26 1 16 0;
