#N canvas 679 0 555 717 10;
#X floatatom 13 197 5 0 0 0 - - -;
#X floatatom 45 219 5 0 0 0 - - -;
#X floatatom 78 238 5 0 0 0 - - -;
#X obj 13 329 #print;
#X obj 33 296 display;
#X text 119 238 <-- step value;
#X text 90 217 <-- upper bound;
#X text 60 194 <-- lower bound;
#X obj 13 261 #for 0 8 1;
#X obj 264 328 #print;
#X obj 314 288 display;
#X msg 264 198 0 0;
#X msg 369 244 1 1;
#X msg 326 223 4 4;
#X text 208 490 Upper bound;
#X text 209 518 Step value;
#X text 208 453 Lower bound. As with the other arguments \, they are
overwritten when another value is given.;
#X text 414 244 <-- step value (1);
#X text 373 222 <-- upper bound (2);
#X text 309 197 <-- lower bound (3);
#X text 26 38 When given scalar bounds \, works like a regular [for]
object plugged to a [#import] tuned for a Dim(size) where size is the
number of values produced by a bang to that [for].;
#X text 196 661 Sets the upper bound;
#X text 195 685 Sets the step value;
#X text 192 739 The result of the operation is a single dimension grid
in the case of scalar values and variable dimensions for vectors.;
#X obj 0 0 doc_h;
#X obj 3 551 doc_i 3;
#X obj 3 430 doc_c 3;
#X text 194 620 activate object (send output);
#X text 194 586 Sets the lower bound and activate;
#X text 193 636 Sets the lower bound without activating;
#X obj 264 267 #for (0 0) (8 3) (1 1);
#X text 26 84 When given vector bounds \, will work like any number
of [for] objects producing all possible combinations of their values
in the proper order. (try it below);
#X text 27 132 the formula for knowing the size of the output will
be is floor((to-from)/step).;
#X obj 14 745 doc_oo 0;
#X obj 14 520 doc_cc 2;
#X text 191 606 the three arguments at once;
#X obj 14 460 doc_cc 0;
#X obj 14 488 doc_cc 1;
#X obj 14 587 doc_ii 0;
#X obj 3 719 doc_o 1;
#X obj 14 664 doc_ii 1;
#X obj 14 688 doc_ii 2;
#X text 11 177 With scalar bounds:;
#X text 262 178 With vector bounds:;
#X obj 100 606 doc_m i0 list;
#X obj 100 626 doc_m i0 bang;
#X obj 100 646 doc_m i0 set;
#X obj 100 745 doc_m i0 grid;
#X obj 100 459 doc_m c0 grid;
#X obj 100 487 doc_m c1 grid;
#X obj 100 520 doc_m c2 grid;
#X obj 100 586 doc_m i0 grid;
#X obj 100 666 doc_m i1 grid;
#X obj 100 686 doc_m i2 grid;
#X connect 0 0 8 0;
#X connect 1 0 8 1;
#X connect 2 0 8 2;
#X connect 8 0 4 0;
#X connect 8 0 3 0;
#X connect 11 0 30 0;
#X connect 12 0 30 2;
#X connect 13 0 30 1;
#X connect 30 0 10 0;
#X connect 30 0 9 0;
