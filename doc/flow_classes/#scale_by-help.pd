#N canvas 690 0 568 671 10;
#X obj 11 82 tgl 15 0 empty empty empty 0 -6 0 8 -24198 -1 -1 0 1;
#X obj 11 102 metro 100;
#X obj 89 149 #in;
#X obj 103 610 #scale_to;
#X obj 173 610 #downscale_by;
#X text 213 547 Outputs the resulting scaled image.;
#X obj 89 227 #out window \, title #scale_by;
#X msg 89 85 open bluemarble.jpg \, bang;
#X obj 89 183 #scale_by 2;
#X text 7 28 The [#scale_by] scales the image received by the row and
column factors passed. A single value applies the scaling uniformly
on the row and columns.;
#X msg 227 129 2 # 2 1;
#X msg 230 152 2 # 2 3;
#X floatatom 181 131 5 0 0 0 - - -;
#X text 206 393 The Grid on which the scale_to will be performed.;
#X obj 0 0 doc_h;
#X obj 3 368 doc_i 2;
#X obj 3 522 doc_o 1;
#X text 198 280 The scaling factor (defaults to 2).;
#X obj 3 610 doc_also;
#X obj 14 552 doc_oo 0;
#X obj 14 398 doc_ii 0;
#X obj 14 474 doc_ii 1;
#X obj 14 285 doc_cc 0;
#X obj 97 398 doc_m i0 grid;
#X obj 97 285 doc_m c0 grid;
#X obj 97 474 doc_m i1 grid;
#X obj 3 255 doc_c 0..1;
#X text 201 472 same as arg 0;
#X text 197 298 if it's a single value \, then that factor is to be
used for both rows and columns.;
#X text 205 407 duplicates each pixel several times in width and several
times in height \, where the number of times is determined by the factor
described above. twice those of the incoming grid. It is several times
faster.;
#X text 213 566 grid((factor*y) (factor*x) channels);
#X obj 97 552 doc_m o0 grid;
#X obj 0 630 doc_f;
#X connect 0 0 1 0;
#X connect 1 0 2 0;
#X connect 2 0 8 0;
#X connect 7 0 2 0;
#X connect 8 0 6 0;
#X connect 10 0 8 1;
#X connect 11 0 8 1;
#X connect 12 0 8 1;
#X connect 18 1 3 0;
#X connect 18 1 4 0;
#X connect 23 1 13 0;
#X connect 23 1 29 0;
#X connect 24 1 17 0;
#X connect 24 1 28 0;
#X connect 25 1 27 0;
#X connect 31 1 5 0;
#X connect 31 1 30 0;
