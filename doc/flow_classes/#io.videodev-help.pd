#N canvas 676 0 558 704 10;
#X obj 0 0 doc_h;
#X obj 15 59 #in videodev;
#X obj 3 90 doc_c ...;
#X obj 3 152 doc_i 1;
#X obj 3 836 doc_o 1;
#X obj 3 1010 doc_also;
#X obj 101 1010 #io:dc1394;
#X obj 168 1010 #io:quicktimecamera;
#X msg 28 120 open videodev /dev/video0;
#X obj 14 176 doc_ii 0;
#X obj 100 176 doc_m i0 brightness;
#X obj 100 196 doc_m i0 hue;
#X obj 100 216 doc_m i0 colour;
#X obj 100 236 doc_m i0 contrast;
#X obj 100 256 doc_m i0 whiteness;
#X obj 100 286 doc_m i0 get;
#X obj 100 306 doc_m i0 help;
#X obj 100 336 doc_m i0 channel;
#X obj 100 356 doc_m i0 tuner;
#X obj 100 376 doc_m i0 norm;
#X obj 100 396 doc_m i0 frequency;
#X obj 100 416 doc_m i0 transfer symbol;
#X text 253 416 "read";
#X text 253 455 "mmap": \$1=nframes (default:2);
#X text 275 471 This is the normal (and fast) way of transferring pictures
from the camera.;
#X text 264 436 Some cameras/drivers only support this instead of mmap.
;
#X obj 100 516 doc_m i0 white_red;
#X obj 100 536 doc_m i0 white_blue;
#X obj 100 555 doc_m i0 white_speed;
#X obj 100 575 doc_m i0 white_delay;
#X obj 100 595 doc_m i0 auto_gain;
#X obj 100 615 doc_m i0 noise_reduction;
#X obj 100 635 doc_m i0 compression;
#X obj 100 665 doc_m i0 colorspace;
#X text 248 663 "y":;
#X text 248 683 "yuv":;
#X text 248 703 "rgb":;
#X text 248 723 "magic":;
#X obj 100 765 doc_m i0 size;
#X text 188 764 \$1=y \$2=x;
#X text 223 314 "min": minimum values for "size";
#X text 223 334 "max": maximum values for "size";
#X text 227 354 default: gets all attributes.;
#X text 223 278 gets a specific attribute. a message is sent through
right outlet.;
#X text 256 501 In case of mmap \, the extra numeric argument sets
the queue length in number of frames \, so you can select an appropriate
tradeoff between efficiency and latency.;
