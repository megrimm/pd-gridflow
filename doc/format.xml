<section name="Picture/Movie Formats">

	<class name="format ppm #in/#out">
		Subformat P6 only.
		Max-number can only be 255 (24-bit RGB).
		

		<method name="open ppm file">
			<arg name="filename" type="symbol"/>
			opens the specified file, taken from the current
			directory.
		</method>

		<method name="open ppm gzfile">
			<arg name="filename" type="symbol"/>
			same but for .ppm.gz files
		</method>

		<method name="grid">
			<arg name="grid" type="grid(rows columns {r g b})"/>
			values 0-255
		</method>
	</class>

	<class name="format jpeg #in/#out">
		Support for RGB non-progressive
		
		<method name="open jpeg file">
			<arg name="filename" type="symbol"/>
			opens the specified file, taken from the current
			directory.
		</method>

		<method name="grid">
			<arg name="grid" type="grid(rows columns 3)"/>RGB-24
		</method>
	</class>

	<class name="format png #in">
		Support for RGB non-progressive
		
		<method name="open png file">
			<arg name="filename" type="symbol"/>
			opens the specified file, taken from the current
			directory.
		</method>

		<method name="grid"><arg name="grid" type="grid(rows columns 1)"/>Y-8 (greyscale)</method>
		<method name="grid"><arg name="grid" type="grid(rows columns 2)"/>YA-16 (greyscale and transparency)</method>
		<method name="grid"><arg name="grid" type="grid(rows columns 3)"/>RGB-24 (colour)</method>
		<method name="grid"><arg name="grid" type="grid(rows columns 4)"/>RGBA-32 (colour and transparency)</method>
	</class>

	<class name="format quicktime #in/#out">
		Support for .mov files.
		This format supports frame-seek and frame-tell.
		Uses the HW-QuickTime library aka QuickTime4Linux
		(libquicktime.so). There is also a variant on the same library and that project
		is just called LibQuickTime.
		Some versions of those libraries may include support for different codecs,
		and some also may support entirely different wrapper formats such as AVI.
		On Macintosh, Apple QuickTime is used instead, but several of the following
		messages may not be available.

		<method name="open quicktime file">
			<arg name="filename" type="symbol" />
		</method>
		<method name="codec">
			<arg name="codec" type="symbol"/>
			Allowed values are at least: raw, jpeg, png, mjpa, yuv2, yuv4.
			Some other values may allowed, depending on the version of the library
			and which codec plugins are installed.
			Must be set before the first frame is written.
			only applies to [#out]. Choosing a codec is important
			because codecs influence greatly the speed of
			encoding, the speed of decoding,
			the size of the written file, and its fidelity to the
			original content. Note that there exist other Apple-QuickTime
			codecs that are not supported by HW-QuickTime.
		</method>
		<method name="parameter">
			<arg name="key" type="symbol"/>
			<arg name="value" type="int"/>
			Sets special codec-specific settings.
			For example: "parameter jpeg_quality 75"
		</method>
		<method name="framerate">
			<arg name="fps" type="int"/>
			Sets the framerate of the file.
			This is not used by GridFlow when reading a file, but other
			programs usually care.
		</method>

		<method name="colorspace">
			<arg name="colorspace" type="symbol"/>
			Allowed values are rgb, rgba, bgr, bgra, yuv, yuva.
			Normally you don't need this.
		</method>
		<method name="size">
			<arg name="height" type="int"/>
			<arg name="width"  type="int"/>
			Forces a window size when writing. Usually this has to be used <u>after</u>
			setting the framerate and codec and <u>before</u> setting the codec-parameters.
			(Strange. Sorry.)
		</method>
		<method name="force_size">
			<arg name="height" type="int"/>
			<arg name="width"  type="int"/>
			forces a window size when reading.
			this is a workaround for a problem in HW-QuickTime.
		</method>
	</class>

	<class name="format mpeg #in">
		support for .mpeg files
		this format supports frame-seek and frame-tell.
		Two different libraries are available for dealing with
		MPEG files. Those have different details, capabilities and quirks.
		In any case, GridFlow does not support importing audio from
		those files.
		If you use the HeroineWarrior library, you may open several
		mpeg files at once, but not with the GregWard library.
		Libraries may scream error messages in a rude way.
		By opposition to PPM and TARGA, this format driver only
		allows a single MPEG stream per file (you cannot "cat"
		several MPEG files together).
		
		Supports Rewind and Frame Select.
		<method name="open mpeg file">
			<arg name="filename" type="symbol"/>
			opens the specified file, taken from the current
			directory.
		</method>
	</class>

	<class name="format aalib #out">
		<method name="open aalib">
			<arg name="driver">
				Normally "X11" with uppercase X; else consult
				the AALib manual.
			</arg>
			<rest name="args">
				You can pass "commandline options" of AALib here.
			</rest>
		</method>
		<method name="grid">
			<arg name="grid" type="grid(rows columns {white})"/>
			converts a greyscale image to an ascii image and possibly
			displays it. note that the image is typically downscaled by
			a factor of 2 by aalib itself.
		</method>
		<method name="grid">
			<arg name="grid" type="grid(rows columns {ascii attr})"/>
			the inverse of "dump". Both together in a loop allow to
			post-process aalib's buffer before displaying. Goes well
			with "draw", "autodraw".
		</method>
		<method name="print">
			<arg name="y" type="int"/>
			<arg name="x" type="int"/>
			<arg name="attr" type="int"/>
			<arg name="text" type="symbol"/>
		</method>
		<method name="autodraw"></method>
		<method name="draw"></method>
		<method name="dump">
			produces a Dim[y,x,2] grid whose two channels are
			ascii character codes and character attributes.
		</method>
	</class>

	<class name="format window #out">
		<method name="open window">
			Equivalent to "open x11", but this can be set by putting a line like
			this in the config file: GridFlow.formats[:window] = GridFlow.formats[:x11]
			(and similarly other aliases can be created too)
		</method>
	</class>
</section>
