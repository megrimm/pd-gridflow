# this file will not contain any aliases, just the canonical names

proc say2 {k v} {
	say [lindex $k 0] $v
	foreach kk [lrange $k 1 end] {say $k "old name of $k : $v"}
}

proc say3 {k v} {
	set kk [regsub ^# $k @]
	say2 [list k kk] $v
}

say #                "plain numeric operators on grids: + - * / etc"
say #border          "add padding on sides of a grid"
say #cast            "convert grid from one number type to another"
say #centroid        "find centroid (weighted average) of the coordinates of a grid"
say #convolve        "compute convolution product of a grid (blur and edge-detection)"
say #dim             "get the size (dimensions) of a grid"
say #downscale_by    "reduce the size of an image by a whole factor"
say #draw_image      "picture-in-picture"
say #draw_points     "(future use)"
say #draw_polygon    "draw polygon in an image"

say #to_float        "convert grid to sequence of floats"
say #to_list         "convert grid to list"
say #to_pix          "convert grid to pix (GEM)"
say #to_symbol       "convert grid of ASCII codes to symbol"

say #fft             "compute forward or inverse one-or-two-dimensional complex FFT of a grid"
say #finished        "bang when grid transmission has ended"
say #fold            "compute the sum of each row, product of each row, and other similar operations"
say #for             "make a grid from all numbers or coordinates in a certain range"
say #from_pix        "convert pix (GEM) to grid"
say #import_pix      "old name of #from_pix"
say #grade           "make an index of the sorting of a grid"
say #import          "convert float, list, or symbol ASCII codes, to a grid"
say #inner           "scalar (\"dot\") product, matrix product, tensor contraction, image channel remapping, etc."

say #io.aalib        "open an aalib window"
say #io.dc1394       "open a faiawaia \"DC\" camera (not DV) using a Linux-compatible OS"
say #io.grid         "read or write a .grid file (GridFlow storage format)"
say #io.jpeg         "read or write a .jpeg file"
say #io.mpeg         "read a .mpeg video file"
say #io.png          "read a .png image file"
say #io.ppm          "read or write a .pbm or .pgm or .ppm image file"
say #io.quicktime    "read a .mov video file (or perhaps .avi)"
say #io.sdl          "open a SDL window"
say #io.videodev     "open a V4L1 device (Linux interface for video cameras and video digitisers)"
say #io.x11          "open a X11 window"

say #labeling        "tag connected pixels with region numbers in a two-tone single-channel image"
say #layer           "layer two same-sized images"
say #moment          "find 1st or 2nd order moment (weighted average or variance) of the coordinates of a grid"
say #noise_gate_yuvs "replaces dark pixels by black pixels in signed YUV images"
say #outer           "apply numeric operator on all possible combinations of elements of one grid with elements of another"
say #pack            "combine floats on separate inlets to make a grid"
say #perspective     "divide each point by its depth"
say #polygonize      "(future use)"
say #print           "print to console"
say #redim           "change the size of a grid by restreaming contents into a new shape"
say #reverse         "mirror image of a grid along a dimension"
say #rotatificator   "make rotation matrix for any two dimensions chosen from manyou"
say #scale_by        "reduce the size of an image by a whole factor"
say #scan            "compute the cumulative sums of each row, and other similar operations"
say #store           "store image in RAM, in-place picture-in-picture, and make lookups in various ways"
say #transpose       "swap two dimensions out of any, in a grid"
say #type            "get a symbol representing the number type of a grid"
say #unpack          "split a grid into floats on separate outlets"

say @join            "join two grids together along any dimension"

say args             "pick up the arguments of an abstraction instance, including nested lists and init-messages"
say class_exists     "figure out whether a class has been loaded by pd"

say display          "print message or grid inside of the patch"
say foreach          "convert a list to a sequence of atom messages"
say gf.error         "emit error message from the perspective of the current abstraction instance in its parent patch"
say gf.suffix_lookup "find the objectclass corresponding "
say listfind         "find index of an element in a list"
say listread         "find element at an index in a list"
say listflatten      "(to be reimplemented)"
say listreverse      "mirror image of a list"
say parallel_port    "send to and receive from a DB25 parallel port"
say range            "multiple moses in cascade"
say receives         "multiple receives with common outlet and other outlet telling the name of intended destination"
say route2           "route messages but keep them intact (does not remove selector)"
say send39           "backward-compatibility crutch for dynamic patching in pd 0.39"
say shunt            "demultiplexer: send input to separately specified outlet"
say systemtime       "time spent by process in kernel mode, as measured by the OS"
say tsctime          "high-resolution real time, as measured by the CPU"
say unix_time        "real time as measured by the OS, including date"
say usertime         "time spent by process in non-kernel mode, as measured by the OS"

say cv.Add           "OpenCV addition"
say cv.Div           "OpenCV division"
say cv.HaarDetectObjects "OpenCV (future use)"
say cv.Kalman        "OpenCV (future use)"
say cv.Mul           "OpenCV multiplication"
say cv.Sub           "OpenCV subtraction"

say #apply_colormap_channelwise "apply color correction tables separately on each channel"
say ascii             "?"
say #background_model "?"
say #camera           "control panel for opening cameras"
say #change           "send grid only if different from previous grid"
say #checkers         "make image of chequered background in two tones of grey"
say #clip             "min and max"
say #color            "GUI for selecting a colour"
say condition         "?"
say #contrast         "?"
say count             "?"
say #draw_rect        "draw a rectangle in an image"
#say #draw_slider      ""
say #edit_polygon     "draw a polygon in an image and react to mouse events"
say #fade_lin         "fade in piecewise-linear fashion"
say #fade             "fade in exponential-decay fashion (linear recurrence)"
say #fastblur         "speedy shortcut for rectangular blur"
#say foreach           ""
say for               ""
say fps ""
say fuck
say #gamma ""
say gf.io_generate ""
say #greyscale_to_rgb ""
say #hueshift ""
say #in ""
say inv* ""
say inv+ ""
say #line_to_polygon ""
say #make_cross ""
say #meuh ""
say #moment_polar ""
say #motion_detection ""
say #mouse ""
say oneshot ""
say #out ""
say pingpong ""
say plotter_control ""
say #polygon_area ""
say #polygon_comparator ""
say #polygon_each_edge ""
say #polygon_moment ""
say #polygon_perimetre ""
say #polygon_radial_map ""
say #posterize ""
say #ravel ""
say #record ""
say #remap_image ""
say #rgba_to_rgb ""
say #rgb_to_greyscale ""
say #rgb_to_rgba ""
say #rgb_to_yuv ""
say #rotate ""
say #saturation ""
say #scale_to ""
say #seq_fold ""
say seq_fold ""
say #slice ""
say #solarize ""
say #sort ""
say #spread ""
say #swap ""
say #text_to_image ""
say #to_literal ""
say #t ""
say var.# ""
say #yuv_to_rgb ""
