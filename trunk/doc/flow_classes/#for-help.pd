#N canvas 645 0 555 717 10;
#X floatatom 13 227 5 0 0 0 - - -;
#X floatatom 45 249 5 0 0 0 - - -;
#X floatatom 78 270 5 0 0 0 - - -;
#X obj 13 365 #print;
#X obj 8 558 cnv 15 60 18 empty empty empty 20 12 0 14 -228992 -66577
0;
#X obj 8 632 cnv 15 60 18 empty empty empty 20 12 0 14 -228992 -66577
0;
#X obj 10 720 cnv 15 60 18 empty empty empty 20 12 0 14 -228992 -66577
0;
#X text 15 744 GRID;
#X obj 33 332 display;
#X obj 9 656 cnv 15 60 18 empty empty empty 20 12 0 14 -228992 -66577
0;
#X text 14 657 Inlet 2;
#X text 13 634 Inlet 1;
#X text 13 559 Inlet 0;
#X obj 9 426 cnv 15 80 18 empty empty empty 20 12 0 14 -228992 -66577
0;
#X text 13 427 Argument 0;
#X obj 8 462 cnv 15 80 18 empty empty empty 20 12 0 14 -228992 -66577
0;
#X obj 8 488 cnv 15 80 18 empty empty empty 20 12 0 14 -228992 -66577
0;
#X text 12 463 Argument 1;
#X text 12 489 Argument 2;
#X text 119 270 <-- step value;
#X text 90 247 <-- upper bound;
#X text 60 224 <-- lower bound;
#X obj 13 297 #for 0 8 1;
#X obj 264 364 #print;
#X obj 284 334 display;
#X msg 264 228 0 0;
#X msg 329 276 1 1;
#X obj 264 303 #for 0 8 1;
#X msg 296 253 4 4;
#X text 94 426 INTEGER;
#X text 94 460 INTEGER;
#X text 94 488 INTEGER;
#X text 14 721 Outlet 0;
#X text 188 460 Upper bound;
#X text 189 488 Step value;
#X text 189 427 Lower bound. As with the other arguments \, they are
overwritten when another value is given.;
#X text 374 276 <-- step value (1);
#X text 343 252 <-- upper bound (2);
#X text 309 227 <-- lower bound (3);
#X text 26 38 When given scalar bounds \, works like a regular [for]
object plugged to a [#import] tuned for a Dim(size) where size is the
number of values produced by a bang to that [for].;
#X text 26 84 When given vector bounds \, will work like any number
of [for] objects producing all possible combinations of their values
in the proper order.;
#X text 35 193 scalar bounds;
#X text 303 196 vector bounds;
#X text 72 557 INTEGER;
#X text 73 632 INTEGER;
#X text 138 633 Sets the upper bound;
#X text 72 656 INTEGER;
#X text 137 657 Sets the step value;
#X text 76 747 The result of the operation is a single dimension grid
in the case of scalar values and variable dimensions for vectors.;
#X text 27 137 Syntax: #for <from> <to> <step> outlet: grid dim(size)
where size = floor(to-from+1)/step.;
#X obj 0 0 doc_h;
#X obj 3 521 doc_i 3;
#X obj 3 691 doc_o 1;
#X obj 3 400 doc_c 3;
#X text 73 577 LIST the three arguments at once;
#X text 72 593 BANG;
#X text 136 592 activate object (send output);
#X text 136 558 Sets the lower bound and activate;
#X text 74 610 SET;
#X text 135 608 Sets the lower bound without activating;
#X connect 0 0 22 0;
#X connect 1 0 22 1;
#X connect 2 0 22 2;
#X connect 22 0 8 0;
#X connect 22 0 3 0;
#X connect 25 0 27 0;
#X connect 26 0 27 2;
#X connect 27 0 24 0;
#X connect 27 0 23 0;
#X connect 28 0 27 1;
