#N canvas 645 0 555 717 10;
#X floatatom 13 227 5 0 0 0 - - -;
#X floatatom 45 249 5 0 0 0 - - -;
#X floatatom 78 270 5 0 0 0 - - -;
#X obj 13 365 #print;
#X obj 10 720 cnv 15 60 18 empty empty empty 20 12 0 14 -228992 -66577
0;
#X text 15 744 GRID;
#X obj 33 332 display;
#X text 119 270 <-- step value;
#X text 90 247 <-- upper bound;
#X text 60 224 <-- lower bound;
#X obj 13 297 #for 0 8 1;
#X obj 264 364 #print;
#X obj 284 334 display;
#X msg 264 228 0 0;
#X msg 329 276 1 1;
#X obj 264 303 #for 0 8 1;
#X msg 296 253 4 4;
#X text 114 426 INTEGER;
#X text 114 460 INTEGER;
#X text 114 488 INTEGER;
#X text 14 721 Outlet 0;
#X text 188 460 Upper bound;
#X text 189 488 Step value;
#X text 189 427 Lower bound. As with the other arguments \, they are
overwritten when another value is given.;
#X text 374 276 <-- step value (1);
#X text 343 252 <-- upper bound (2);
#X text 309 227 <-- lower bound (3);
#X text 26 38 When given scalar bounds \, works like a regular [for]
object plugged to a [#import] tuned for a Dim(size) where size is the
number of values produced by a bang to that [for].;
#X text 26 84 When given vector bounds \, will work like any number
of [for] objects producing all possible combinations of their values
in the proper order.;
#X text 35 193 scalar bounds;
#X text 303 196 vector bounds;
#X text 92 557 INTEGER;
#X text 93 632 INTEGER;
#X text 158 633 Sets the upper bound;
#X text 92 656 INTEGER;
#X text 157 657 Sets the step value;
#X text 76 747 The result of the operation is a single dimension grid
in the case of scalar values and variable dimensions for vectors.;
#X text 27 137 Syntax: #for <from> <to> <step> outlet: grid dim(size)
where size = floor(to-from+1)/step.;
#X obj 0 0 doc_h;
#X obj 3 521 doc_i 3;
#X obj 3 691 doc_o 1;
#X obj 3 400 doc_c 3;
#X text 93 577 LIST the three arguments at once;
#X text 92 593 BANG;
#X text 156 592 activate object (send output);
#X text 156 558 Sets the lower bound and activate;
#X text 94 610 SET;
#X text 155 608 Sets the lower bound without activating;
#X obj 14 557 doc_ii 0;
#X obj 14 634 doc_ii 1;
#X obj 14 658 doc_ii 2;
#X obj 14 424 doc_cc 0;
#X obj 14 458 doc_cc 1;
#X obj 14 490 doc_cc 2;
#X connect 0 0 10 0;
#X connect 1 0 10 1;
#X connect 2 0 10 2;
#X connect 10 0 6 0;
#X connect 10 0 3 0;
#X connect 13 0 15 0;
#X connect 14 0 15 2;
#X connect 15 0 12 0;
#X connect 15 0 11 0;
#X connect 16 0 15 1;
