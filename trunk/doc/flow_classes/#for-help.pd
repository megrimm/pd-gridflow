#N canvas 645 0 555 704 10;
#X floatatom 13 227 5 0 0 0 - - -;
#X floatatom 45 249 5 0 0 0 - - -;
#X floatatom 78 270 5 0 0 0 - - -;
#X obj 13 365 #print;
#X obj 10 659 cnv 15 500 17 empty empty empty 20 12 0 14 -228992 -66577
0;
#X obj 8 438 cnv 15 60 18 empty empty empty 20 12 0 14 -228992 -66577
0;
#X text 219 661 Outlets (1);
#X obj 9 757 cnv 15 500 18 empty empty empty 20 12 0 14 -228992 -66577
0;
#X obj 8 512 cnv 15 60 18 empty empty empty 20 12 0 14 -228992 -66577
0;
#X obj 10 680 cnv 15 60 18 empty empty empty 20 12 0 14 -228992 -66577
0;
#X text 15 704 GRID;
#X obj 33 332 display;
#X text 213 758 Arguments (3);
#X obj 9 586 cnv 15 60 18 empty empty empty 20 12 0 14 -228992 -66577
0;
#X text 14 587 Inlet 2;
#X text 13 514 Inlet 1;
#X text 13 439 Inlet 0;
#X obj 9 786 cnv 15 80 18 empty empty empty 20 12 0 14 -228992 -66577
0;
#X text 13 787 Argument 0;
#X obj 8 852 cnv 15 80 18 empty empty empty 20 12 0 14 -228992 -66577
0;
#X obj 8 908 cnv 15 80 18 empty empty empty 20 12 0 14 -228992 -66577
0;
#X text 12 853 Argument 1;
#X text 12 909 Argument 2;
#X text 119 270 <-- step value;
#X text 90 247 <-- upper bound;
#X text 60 224 <-- lower bound;
#X obj 13 297 #for 0 8 1;
#X obj 264 364 #print;
#X obj 284 334 display;
#X msg 264 228 0 0;
#X msg 329 276 1 1;
#X obj 264 303 #for 0 8 1;
#X msg 296 253 4 4;
#X text 11 814 INTEGER;
#X text 11 875 INTEGER;
#X text 11 935 INTEGER;
#X text 14 681 Outlet 0;
#X text 105 875 Upper bound;
#X text 106 935 Step value;
#X text 106 815 Lower bound. As with the other arguments \, they are
overwritten when another value is given.;
#X text 11 488 LIST;
#X text 374 276 <-- step value (1);
#X text 343 252 <-- upper bound (2);
#X text 309 227 <-- lower bound (3);
#X text 26 38 When given scalar bounds \, works like a regular [for]
object plugged to a [#import] tuned for a Dim(size) where size is the
number of values produced by a bang to that [for].;
#X text 26 84 When given vector bounds \, will work like any number
of [for] objects producing all possible combinations of their values
in the proper order.;
#X text 35 193 scalar bounds;
#X text 303 196 vector bounds;
#X text 9 465 INTEGER;
#X text 74 466 Sets the lower bound;
#X text 9 535 INTEGER;
#X text 74 536 Sets the upper bound;
#X text 9 611 INTEGER;
#X text 74 612 Sets the step value;
#X text 76 707 The result of the operation is a single dimension grid
in the case of scalar values and variable dimensions for vectors.;
#X text 27 137 Syntax: #for <from> <to> <step> outlet: grid dim(size)
where size = floor(to-from+1)/step.;
#X obj 0 0 doc_h;
#X obj 0 401 doc_i 3;
#X connect 0 0 26 0;
#X connect 1 0 26 1;
#X connect 2 0 26 2;
#X connect 26 0 11 0;
#X connect 26 0 3 0;
#X connect 29 0 31 0;
#X connect 30 0 31 2;
#X connect 31 0 28 0;
#X connect 31 0 27 0;
#X connect 32 0 31 1;
