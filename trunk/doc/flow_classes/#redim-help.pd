#N canvas 680 0 568 624 10;
#X text 86 37 rearrange a grid's values according to new dimensions
;
#X obj 21 36 bng 15 250 50 0 empty empty empty 0 -6 0 8 -24198 -1 -1
;
#X obj 21 103 #in;
#X obj 111 154 #out window;
#X obj 103 575 #ravel;
#X obj 153 575 #perspective;
#X obj 21 154 #out window;
#X obj 21 127 t a a;
#X obj 111 124 #redim (120 160 3);
#X text 200 443 Outputs the redimensioned data as a grid.;
#X msg 232 131 240 320 3;
#X msg 226 95 400 400 3;
#X obj 0 0 doc_h;
#X obj 3 277 doc_i 2;
#X obj 3 193 doc_c 1;
#X obj 3 575 doc_also;
#X obj 3 413 doc_o 1;
#X obj 14 307 doc_ii 0;
#X obj 14 381 doc_ii 1;
#X obj 14 443 doc_oo 0;
#X obj 14 223 doc_cc 0;
#X obj 97 223 doc_m c0 grid;
#X text 200 223 dimension list \, (120 160 3) in this example.;
#X obj 97 307 doc_m i0 grid;
#X text 200 245 same as the dimension list of #import;
#X text 200 307 the elements of this grid are serialized. if the resulting
grid must be larger \, the sequence is repeated as much as necessary.
if the resulting grid must be smaller \, the sequence is truncated.
then the elements are deserialized to form the resulting grid.;
#X obj 97 381 doc_m i1 grid;
#X text 200 381 same as arg 0;
#X obj 97 443 doc_m o0 grid;
#X text 200 465 example: with a 240 320 RGB image \, [#redim 120 640
3] will visually separate the even lines (left) from the odd lines
(right). contrary to this \, [#redim 640 120 3] will split every line
and put its left half on a even line and the right half on the following
odd line. [#redim] 480 320 3 will repeat the input image twice in the
output image. [#redim] 240 50 3 will only keep the 50 top lines.;
#X obj 0 595 doc_f;
#X msg 21 81 load working.jpg;
#X connect 1 0 31 0;
#X connect 2 0 7 0;
#X connect 7 0 6 0;
#X connect 7 1 8 0;
#X connect 8 0 3 0;
#X connect 10 0 8 1;
#X connect 11 0 8 1;
#X connect 15 1 4 0;
#X connect 15 1 5 0;
#X connect 21 1 22 0;
#X connect 21 1 24 0;
#X connect 23 1 25 0;
#X connect 26 1 27 0;
#X connect 28 1 9 0;
#X connect 28 1 29 0;
#X connect 31 0 2 0;
