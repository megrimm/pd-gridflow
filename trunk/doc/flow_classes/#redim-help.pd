#N canvas 680 0 554 573 10;
#X text 86 37 rearrange a grid's values according to new dimensions
;
#X obj 21 36 bng 15 250 50 0 empty empty empty 0 -6 0 8 -24198 -1 -1
;
#X obj 21 59 fork;
#X obj 21 103 #in;
#X obj 111 183 #out window;
#X msg 44 81 open working.jpg;
#X obj 103 595 #ravel;
#X obj 153 595 #perspective;
#X obj 21 184 #out window;
#X obj 21 127 t a a;
#X obj 111 124 #redim (120 160 3);
#X text 196 434 Outputs the redimensioned data as a grid.;
#X msg 232 131 240 320 3;
#X msg 226 95 400 400 3;
#X obj 0 0 doc_h;
#X obj 3 270 doc_i 2;
#X obj 3 216 doc_c 1;
#X obj 3 595 doc_also;
#X obj 3 407 doc_o 1;
#X obj 14 297 doc_ii 0;
#X obj 14 366 doc_ii 1;
#X obj 14 431 doc_oo 0;
#X obj 14 240 doc_cc 0;
#X obj 100 240 doc_m c0 grid;
#X text 198 238 dimension list \, (120 160 3) in this example.;
#X obj 100 297 doc_m i0 grid;
#X text 200 252 same as the dimension list of #import;
#X text 196 295 the elements of this grid are serialized. if the resulting
grid must be larger \, the sequence is repeated as much as necessary.
if the resulting grid must be smaller \, the sequence is truncated.
then the elements are deserialized to form the resulting grid.;
#X obj 100 366 doc_m i1 grid;
#X text 195 366 same as arg 0;
#X obj 100 436 doc_m o0 grid;
#X text 196 455 example: with a 240 320 RGB image \, [#redim 120 640
3] will visually separate the even lines (left) from the odd lines
(right). contrary to this \, [#redim 640 120 3] will split every line
and put its left half on a even line and the right half on the following
odd line. [#redim] 480 320 3 will repeat the input image twice in the
output image. [#redim] 240 50 3 will only keep the 50 top lines.;
#X connect 1 0 2 0;
#X connect 2 0 3 0;
#X connect 2 1 5 0;
#X connect 3 0 9 0;
#X connect 5 0 3 0;
#X connect 9 0 8 0;
#X connect 9 1 10 0;
#X connect 10 0 4 0;
#X connect 12 0 10 1;
#X connect 13 0 10 1;
