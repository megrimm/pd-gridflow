#N canvas 362 183 662 404 10;
#X obj 19 37 bng 15 250 50 0 empty empty empty 0 -6 0 8 -233017 -1
-1;
#X msg 212 76 1 1 1 1 1 1 1 1 1;
#X text 569 17 gridflow;
#X text 18 363 see also:;
#X obj 212 57 loadbang;
#X msg 42 85 open bluemarble.jpg;
#X text 70 155 here ^ is the parallel operator \, fold is indicated
by + and 0 is its base.;
#X obj 19 62 fork;
#X obj 19 133 #convolve \, op ^ \, fold + \, seed 0;
#X obj 212 96 #redim (3 3);
#X obj 19 108 #in;
#X text 14 15 #convolve blurs \, sharpens \, finds edges \, emboss
& more ...;
#X obj 19 309 #out window;
#X obj 89 367 #contrast;
#X obj 158 367 #posterize;
#X obj 234 367 #solarize;
#X obj 303 367 #layer;
#X text 216 187 splits the incoming grid into dim(rest...) parts \,
for each of those parts at (xy \, x). a rectangle of such parts \,
centered around (y \, x) is combined with the convolution grid like
a [#] of operation op_para. then each such result is folded like [#fold]
of operation op_fold and specified base. the results are assembled
into a grid that is sent to the outlet. near the borders of the grid
\, coordinates wrap around. this means the whole grid has to be received
before production of the next grid starts. this is the convolution
grid and it gets stored in the object. rows2 and columns2 must be odd
numbers.;
#X connect 0 0 7 0;
#X connect 1 0 9 0;
#X connect 4 0 1 0;
#X connect 5 0 10 0;
#X connect 7 0 10 0;
#X connect 7 1 5 0;
#X connect 8 0 12 0;
#X connect 9 0 8 1;
#X connect 10 0 8 0;
