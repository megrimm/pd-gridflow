/* $Id$ */

--- make the development process more test-driven:
    * file every feature request and bug report into base/test.rb so
      that gridflow fails those tests;
    * THEN make gridflow pass those tests.

for 0.7.7:
[ ] GF with Pd 0.36 : undefined pd_newest

for 0.7.8:

[ ] [#reverse]
[ ] [#change]
[ ] we're switching to PD for abstractions, instead of Ruby.
    Make a new bunch of them. Add a video latency patch (in examples)
[ ] consider including [mysql] [renamefile] [ls] [shell]

for 0.7.9: ?

for 0.8.0:

 * added #matrix_solve, #slice
 * Copy-on-Write (COW)
 * Numop API exposed to Ruby
 * < 10 bugs in buglist
 * Fully hyperlinked manual
 * internals documentation
 * internal grid protocol redesigned
 * [#export~]
 * raise limit of in/outlets from 10 to 100 or unlimited.

for 0.8.1:

 * wrap Pd API completely.
 * drop the :whatever part.

Bugs (High Priority) (!!! Fix all of these before 0.8.0 !!!)

pick a number: [145]

[144] small leak remaining in x11. may have to do with non-use of XDestroyImage.
[141] shouldn't be able to call Pd from a non-main Ruby thread.
[140] is [@convolve] actually cross-convolution?
	that is, convolves with a mirror image of the convolution matrix.
[139] [#peephole]
	<mis> matju: BUG-ALERT - peephole does not delete until a screen refresh
	<mis> matju: I was just about to do that
	<mis> matju: it works... almost
	<mis> matju: if you try to move the GOPed abstraction the peepholes don't move along
	<mis> he :)  better yet, the abstraction's bounding box's lower right corner will not move up or to the left of the low right corner of the peephole it contains.  Instead it will resize itself as you move it around.  
[138] [#peephole] crash
[137] [gf] peeperr: problem with set_geometry, wrong size.
[136] fix C_INCLUDE_PATH vs CPLUS_INCLUDE_PATH
[135] document GridFlow.data_path
[134] #import with zero size crashes?
[133] numop ** can freeze GF
[129] [display] should be translated to [messageprepend set] -> ""
[128] loadbang-messages (comma) don't get translated to .pd ??
[127] $(bindir) is not defined in Ruby 1.6
[121] #downscale_by still craps on RGBA images?
[120] osx: -bundle_loader stuff fails if Pd is not in $PATH
[119] osx: SDL doesn't work here
[118] error messages can be unclear (eg. file not open... is it #in's, or #out's?)
[117] osx: [#store] crash instead of raising
[115] x11: dual display does not work (screens .0 vs .1; but xinerama works fine)
[112] Pt<T>: some casts aren't done properly
[111] images/movies/gt.mov (penguin in raw codec) still doesn't load (why? 16 bpp?)
[108] encoding quicktime without uint8: does it really work?
[107] MMX computations may be done misaligned, which may be bad.
[105] when file not found, mpeg error messages are wrong, they say the filename is "".
[102] osx: error: shmget failed (cannot allocate memory) in X11, for regular pictures
[100] osx: libgridflow.so installs in wrong directory (of course)
[092] ./configure --lite to disable 64-bit types? and maybe float32/64 ?
[090] doesn't check whether ruby/version.h matches .so / .a
[027] tcp test is broken
[089] is LINK TO="..." not properly handled? see part of install.xml that uses it.
[088] FIX MOULINETTE.RB ! <attr name type default>
[087] maybe write a script that automatically gets the backtrace from GDB.
[086] I need better aborting of grids right fucking now.
[078] "unsupported codec" bogus errors.
[097] bin/backtrace does not detect scripts
[004] bug in automatic type conversion (eg: #in quicktime -> ...)
[005] can't open "": Success; loading a nonquicktime file using quicktime
[006] #in#open problem with String argument.
[010] separate bridge makefiles from other makefiles!!!
[011] research bugs in nonblock IO with Ruby. (eg. serial port)
[025] format_grid: write test for other bpv's
[026] latency is not that good. (GC ?)
[030] FormatGrid: not properly tested (crashes sometimes)
[031] stdout should be redirected if bridge is present
[032] error handling sometimes leads to crash
[033] error handling shows inanely useless messages (sometimes)
[034] format/mpeg3.c,quicktime.c might cause lockup on exit
[037] new "seed"s may leak ? (Grid vs Grid*)
[038] some seeds aren't typechecked
[039] jpeg file cat crashes on second file (jpeglib buffering?)
[040] GRID_FINISH triggered while backstore ???

Bugs (Low Priority)
[079] can trap segfaults in codecs of libquicktime.
[090] http://poynton.com/notes/colour_and_gamma/ColorFAQ.html#RTFToC30
[076] EINTR not handled properly in a lot of code?
[041] what would be a way to make GF work well with Pd's idea of a list?
[043] TCP server socket busy even after kill
[045] write unit tests about required functionality
[046] write unit tests about error checking
[047] make system to ensure everything is working before a release.
[048] potential issues between fork() and X11 ?
[050] BitPacking has trouble with masks that extend beyond int25be
[051] remove the crap given by -w of ruby
[054] it's possible to crash by sending data in two inlets of a same object at once
[059] mess with options in format grid
[060] look for "!@#$" in source
[029] #join on small chunks is way too slow
[009] T_DATA #dup #clone ???
[131] "open x11 10.0.0.5:0.1" -> ERROR: opening X11 display: Success

===================

Community
[ ] put new examples on website

Distribution
[ ] should now plan which features are pre-1.0 and which are post-1.0
[ ] review all documentation
[ ] review all examples
[ ] make CDs

Installation
[ ] make the installer help the user more:
      * .h was found
      * compiled with .h correctly
      * .so|.a was found
      * linked with .so|.a correctly
[ ] installable doc
[ ] installable includes ?
[ ] produce linux binaries ("static")
[ ] produce cygwin32 or mingw32 binaries
[ ] produce macosx binaries
[ ] produce linux rpm/deb
[ ] less compile-time checks and more run-time checks
[ ] should GridFlow be bundled with some of its own dependencies?
[ ] reintroduce --puredata-dist-dir ?
[ ] --prefix (pour ruby)
[ ] install vs site-install mess
[ ] --whole-archive
[ ] bridge should check that the gridflow.so file matches.
[ ] make ./configure's 'test' method work using exceptions
    for meaningful error reporting in config.log.
[ ] make uninstall
[ ] have option for gprof
[ ] cross-compile:
	http://www.libsdl.org/extras/win32/cross/
	http://rooster.stanford.edu/~ben/linux/cross.php

Documentation
[ ] make a short feature list as a promo
[ ] add credits
[ ] indiquer comment faire un rapport à propos d'une carte v4l ou d'un
    mode x11 non-supporté
[ ] project_policy.xml
[ ] specify policy for <help>, <icon>, etc.
[ ] things you type verbatim are all in KBD blocks
[ ] placeholders for your own values are all in I blocks
[ ] document our own release procedures, how our CVS works
[ ] document how to report bugs, basic troubleshooting
[ ] document our distribution of the archives
[ ] ascii conventions: [foo] vs "foo", etc.
[ ] document internals
[ ] describe indexmap in doc
[ ] document backward compatibility issues
[ ] typical uses: <typical></typical>
[ ] architecture: class->type/shape->use->role
[ ] it should be indicated whether an object is supported by pd/ruby/c++
[ ] heavily hyperlink documentation
[ ] automate more parts of the documentation
[ ] benchmarks (especially: simple video i/o)
[ ] mimic [pdp_help_input] [pdp_help_output]: they are convenient
--- remember to keep doc/help/screenshots/examples up to date

Source Filter
[ ] add \ruby \end blocks (multiline inlined rubyscripts)
[ ] \attr

Architecture
<pat> aussi les erreurs que donne gf c'est beaucoup de ligne pour juste un file not found ;)
[ ] Ptr<T> is Pt<T> + refcounting ?
[ ] reentrancy of objects (to allow true recursion)
[ ] eliminate the Dim class, replacing by Grid itself (?).
[ ] inlet-variables (variables associated to inlets)
[ ] change the protocol completely:
	not based on messages, but rather a push/pull combination,
	add GridStream objects, allow them to be passed in other
	messages; etc... (?!?)
[ ] pull mode (functional-style)
[ ] bidirectional messages (constraint/relational-style)
[ ] send-reply messages (imperative-style)
[ ] add reflection (#global:classes, #global:methods, ...)
[ ] use C++ destructor for C++ fields...
[ ] use MétaRuby typing to make things friendlier.
[ ] transmitting grids by diffs?
[ ] dispatch on _n_-prefixed methods (one selector any inlet)
	and     _#{i}_-named methods (any selector one inlet)
[ ] security modes:
	<=0 : can run arbitrary programs and ruby scripts ?
	<=1 : can write files
	<=2 : can read files
	<=3 : can open windows ?
[ ] generalize the backstore
[ ] Outlet#buffer should harmonise with the lcm of its
	corresponding Inlet#factor's.
[ ] lazy grids: Grid#operator Pt<T> makes sure all the grid is received
	and Grid#range(int start, int n, T bogus) makes sure the
	specified part of the grid is received.
[ ] accounting: grids messages packets numbers bytes copybytes
[ ] memory profiling
[ ] compare Ruby API with both flext/pyext
[ ] add a "query" class for debugging other objects?
    (would be able to extract extra info from each object/class)
[ ] add a GridFlow::LaterException or something
    (which tells to retry later with the same packet because another
    grid reception is not completed yet.) 
[ ] add a deprecation system
[ ] interpret nested lists as n-dimensional.

Operators
[ ] User-defined operators; compound operators... e.g.
	[# {{* 7} + {>> 3}}]
[ ] n-ary operators... make [#] variable-inlet
[ ] trinary ops? eg. */ *>> *+ ?: minmax &<< >>&
[ ] op2: abs- (absolute difference), avg (average), erf, rol, ror, weight
[ ] remove fold/scan for ops for which it makes no sense.
[ ] MMX memcpy() ?
[ ] MMX _runtime_ autodetection

Bridge
[ ] UnknownAtom class
[ ] Pd bridge should support list-literals inside messages
[ ] GFBridge object visible from Ruby

Computation Objects
[ ] #counter (similar to #for)
[ ] #inner inlet 2 -> 1, and other incompatibilities i wanted to introduce
[ ] #for "step" argument should have default {1...}
[ ] zero option in #convolve (?)
[ ] #convolve2 (simpler)
[ ] #convolve rewritten as combination of #convolve2+#border ?
[ ] #convolve(2): should allow n-D convolution
[ ] #complex_sq is backwards
[ ] #store: option zero (?)
[ ] #import~, #export~
[ ] #fold, #scan: option reverse (right-to-left)
[ ] #,#join: option swap (?)
[ ] #matrix_inverse, #matrix_solve
[ ] #reverse (on given dimension number)
[ ] #timeline (or rtmetro): sequencing of events from grid
[ ] #replace_if, #random_select, #markov_chain, #unpack, #sort, #slice, #splice
[ ] #polygon_perimeter, #polygon_area, #draw_polygon smoothly
[ ] fuzzy #store (interpolate)
[ ] write a complete benchmark script
[ ] spatial biquads (ask Tom)
[ ] string operations to compensate for the feebleness of PD in that area.
	this includes [#sprintf].
[ ] #pack should become type-conscious (cast option, like #import)
--- see also APL/J/NArray/PDL/Aplus/Yorick/IPOW reference

Effects
[ ] #mosaic
[ ] #gaussian_blur, #sobel, #pixelize, #despeckle (median)
[ ] #dither, #draw_lines, #draw_points, #fire, #border, #queue
[ ] #chroma_key: i0=RGBpicture i1=RGBcolor i2=tolerance o0=RGBApicture
        with fuzzy flag; (don't call it #chroma_key though)
	maybe #mask...
[ ] turtle (logo style)
[ ] effectv
[ ] create templates for usage patterns
[ ] see gimp for ideas
[ ] kaleidoscopes
[ ] FFTW
[ ] bilinear interpolation a+(b-a)*x+(c-a)*y+(a-b-c+d)*x*y (#scale_by smoothly?)
[ ] #scale_by/#downscale_by fractional values
[ ] bicubic interpolation
[ ] multilinear interpolation (n-dimensional?)
[ ] #daltonism

Input/Output
[ ] replace "open <driver> <source> <filename>" by "open <driver> <mrl>"
[ ] videodev: is it possible to reach 60 fps ?
[ ] a #store that is persistent (saved in .pd) ?
[ ] Grid: support storage in all six types
[ ] Grid: bpv 1,2,4 uint
[ ] Grid: text version of the format (?)
[ ] Max, Gimp, GStreamer, ffmpeg, xine, mplayer, Hermes/PTC/TinyPTC,
[ ] GEM, PDP, FreeFrame, MacOSX-Quartz, Win32-GDI, Win32-DirectX, OSC
[ ] RubyX11 0.6
[ ] support for output inside of a GUI app (Tk/Gtk/Qt/...)
[ ] get subtitling of tv channels
[ ] in-place editing (rw mode)
[ ] add messages "load", "save" as open,bang,close combos. (?)
[ ] use 1.8.0's IO#read(Integer,String)->String
[ ] SDL: should support multiple windows
[ ] x11,sdl,aalib: use buffering to synchronise frames at a constant rate.
[ ] x11: sync with the actual vsync of the monitor
[ ] x11: maybe vram-to-vram copy using X11's Pixmap remote-objects
[ ] shell object?
[ ] #import, 'grid tcp': option: sudden vs gradual transmission through gridflow.
[ ] HPGL, [unixtime]
[ ] x11: support dual heads
[ ] [parallel_port], [serial_port], [usb_mouse]
[ ] videodev: messages "get contrast", "get brightness", etc...
    which would output messages "contrast $1", "brightness $1", from outlet 1
    also just "get" would do all possible get's at once.

Format
[ ] remaining number type support in formats
[ ] x11: draw with optional arguments on part of picture to redraw
[ ] all: possibly get rid of the "format" notion ?
[ ] TAR, ZIP, CAT with seeking
[ ] PNM: P1,P2,P3,P4,P5 support
[ ] XBM, XPM, GIF support
[ ] fork: pseudoformat for launching format handler as separate process
[ ] /dev/dsp, /dev/mixer
[ ] Generic SHM/MMAP Drivers
[ ] videodev: choose number of buffered frames
[ ] Unix-for-Pd (stdin inlet, stdout/stderr outlets)
[ ] "open grid pipe" and such.
[ ] TCP: non-blocking write
[ ] TCP: buffer n grids
[ ] multi: multi-file (by glob pattern, e.g.: foo*.ppm)
[ ] AVI
[ ] format grid: "headerless until 10" (text files)
[ ] settable buffer size in videodev

User Interface
[ ] color picker
[ ] gridbox (akin to intbox) or grid edition dialog, etc.
[ ] peephole:
    [x] auto-#scale_by for very small images
    [ ] works with Pd
    [ ] works without x11 (for osx...)
    [ ] appear _over_ pulldowns ? (and popups, even?)
    [x] is it possible to make it borderless? not with x11
    [ ] does it really work with something other than 3 channels ?
    [ ] add a popup menu that makes sense
[ ] make ruby/tcl evaluator boxes retractable
[ ] vector slider (n parallel sliders in one, Dim(n))
[ ] 2d slider
[ ] radial slider (angle chooser)
[ ] drag-and-drop palette of object construction
[ ] object construction menu specialized for each class
	(generated from class reflection/metadata)

Extra/Examples/Etc
[ ] make demo app(s) in Ruby/Tk: bin/playmovie
[ ] .pd: read; write better
[ ] examples/generique.pd
[ ] add examples from the workshop, etc

how about creating aliases like "open window" = "open x11 here" (or arbitrary
user-defined sequence of messages settable in ~/.gridflow_startup)  and "open
videodev" -> "open videodev /dev/video0, option channel 1, option size 240 320" 
maybe there should be a separate ~/.gridflow_config that would be saveable from
gridflow, and ~/.gridflow_startup would be edited only by the user but
~/.gridflow_config would still be a text file.  i say that
because the startup is a ruby script so gridflow couldn't just do
search-and-replace in there, because the option could be inside a "if"
expression and such... at most, gridflow could _append_ text to
.gridflow_startup, to be non-intrusive... hrm... i'm late. i should go now. 

Feature Requests

From: Dave Bergevin <dabergevin@eisa.com> 
  [ ] synchronized audio with the video when using mpeg1 & 2
  [ ] full screen mode (without the menu bars or frames)

From: Alexandre Castonguay <acastonguay@artengine.ca>
  [ ] support for tcp/ip connections to control pd objects (from a web 
      interface)
  [ ] server side pd to handle multiple incoming commands, audio + video 
      streams
  [ ] support for audio in the mpeg streams

<matju> alx_away:
 le tab completion ne donnerait pas seulement les noms possibles pour le
prochain argument dans le objectbox; il donnerait aussi une description de
l'argument (surtout dans le cas où l'argument a beaucoup de valeurs
possibles) 
 je pense que le help de Pd est une bonne idée (le concept hands-on)
mais ça pourrait aller plus loin. 
 j'ai pensé intégrer le manuel de référence de gridflow directement dans
le programme, disponible au runtime, dans l'éventualité d'un GUI qui
saurait en tirer avantage. sinon on pourrait faire des hacks cool genre un
message "help" au inlet 0 enverrait une description de la classe dans le log.
 (sauf que dans ce cas: [rubyprint] est tenu d'afficher directement tout
ce qu'il reçoit. alors doit-il écrire "help" ou écrire le help ? 

alx1->matju: détection de plusieurs personnes; détection avec deux caméras
(?);  détecter les formes; détecter les couleurs; support mpeg4; hotspots

<alx1> matju: another feature for the summer : select file to load via a
navigable menu as in 'file/open'
<matju> alx1: this is not a feature i can put in gridflow. if you want it,
then i can make one for pd, but it does not make sense to
add it to gridflow itself. 

> http://redshift.sourceforge.net/debugging-GC/ [ruby-talk:53835]
> You might also want to search the web for "malloc debugger".

debugging:

gdb `which ruby`
----------------------
break main
run -rgridflow -e ';'
set step-mode on
break eval.c:5409
cont
add-symbol-file /usr/local/lib/ruby/site_ruby/1.6/i686-linux/gridflow.so
rbreak ^_init

stepi
----------------------

p dlopen("/opt/lib/ruby/site_ruby/1.8/i586-linux/gridflow.so",0)

... I am Jack's Overwritten Stack Pointer...

<ircbridge> <GPS> Tcl_GetObjResult Tcl_GetErrorInfo ...
<ircbridge> <GPS> Tcl_GetStringResult may also be helpful.  (note I can't
seem to find Tcl_GetErrorInfo (maybe I dreamed it up)) 
<ircbridge> <GPS> matju: BTW CatchObjCmd might help too
<ircbridge> <GPS> I see that the new Tcl_Dict commands have taken over the HEAD's CatchObjCmd

ClaudiusMaximus reports that allocating a 197M grid causes a crash (turns out C++
throws exception, can't allocate, signal ABRT)

ClaudiusMaximus says: I want to be able to send output from Pd+Gridflow to a video4linux
loopback device so that other v4l programs can access the stream.
I found the video loopback device here: http://motion.sourceforge.net/vloopback/

<alx2> matju: iSight on linux :
http://episteme.arstechnica.com/6/ubb.x?a=tpc&s=50009562&f=8300945231&m=40110681
<alx2> matju: apparently it needs something called 'coriander'...I'm checking into it
<alx2> matju: the person who got it working mentions libdc1394
<alx2> matju: ah coriander is a GUI for firewire
<alx2> matju: on this page :
http://www.tele.ucl.ac.be/PEOPLE/DOUXCHAMPS/ieee1394/cameras/index.html
<alx2> matju: I learn that the iSight is compliant with version 1.30 of IIDC
<alx2> matju: the docs for coriander mention that the author needed to create a major and minor device for the camera.
<alx2> matju: retyping (damn pdf's) -> there are two devices to create: raw1394 and video1394
<alx2> matju: raw1394 has major 171 and minor 0 while video1394 had major 171 and minor 16
<matju> thanks
<alx2> matju: any useful info?
<matju> i'll see, doing something else at the moment
<alx2> matju: having a camera like the iSight supported could be fantastic for video capture/detection on a laptop.  Not to mention that the bttv cards are getting harder to locate

-mfpmath=sse2

<MiS> <matju> alx2: btw you cannot set helpfiles explicitly on _abstractions_... 
<MiS> yes you can
<MiS> and specify -helppath to add a path to help.  So selecting 'Help'
      in the pop-up on an abstraction will open a help fiel for that abstraction

