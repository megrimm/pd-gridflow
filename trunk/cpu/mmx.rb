=begin
	$Id$

	GridFlow
	Copyright (c) 2001,2002 by Mathieu Bouchard

	This program is free software; you can redistribute it and/or
	modify it under the terms of the GNU General Public License
	as published by the Free Software Foundation; either version 2
	of the License, or (at your option) any later version.

	See file ../COPYING for further informations on licensing terms.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with this program; if not, write to the Free Software
	Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
=end

puts "; generated by/for GridFlow 0.6.6"

def make_fun(x)
	puts "GLOBAL #{x}", "#{x}:"
	puts "push ebp", "mov ebp,esp", "push esi", "push edi"
	yield
	puts "pop edi", "pop esi", "leave", "ret"
end

$sizeof = {
	"uint8" => 1,
	"int16" => 2,
	"int32" => 4,
};	

def make_fun_map(type,op,opcode)
	s="mmx_#{type}_map_#{op}"
	size = $sizeof[type]
	n=4
	make_fun(s) {
		puts "
		mov ecx,[ebp+8]
		mov esi,[ebp+12]
		mov eax,[ebp+16]
		push eax
		push eax
		movq mm7,[esp]
		add esp,8
		#{s}_0:
		cmp ecx,#{8/size*n}
		jb #{s}_3"
		for i in 0...n do puts "movq mm#{i},[esi+#{8*i}]" end
		for i in 0...n do puts "#{opcode} mm#{i},mm7" end
		for i in 0...n do puts "movq [esi+#{8*i}],mm#{i}" end
		puts "lea esi,[esi+#{8*n}]", "lea ecx,[ecx-#{8/size*n}]"
		puts "
		jmp #{s}_0
		#{s}_3:
		test ecx,ecx
		jz #{s}_2
		#{s}_1:
		add [esi+0],eax
		lea esi,[esi+#{size}]
		dec ecx
		jnz #{s}_1
		#{s}_2:
		emms
		"
	}
end

make_fun_map("int32","add","paddd")
make_fun_map("int16","add","paddw")
make_fun_map("uint8","add","paddb")

make_fun("pentium_int32_map_add") {
puts"
mov ecx,[ebp+8]
mov esi,[ebp+12]
mov eax,[ebp+16]

j0:
add [esi+0],eax
add esi,4
dec ecx
test ecx,3
jne j0

test ecx,ecx
je j2

j1:
add [esi+0],eax
add [esi+4],eax
add [esi+8],eax
add [esi+12],eax
add esi,16
sub ecx,4
jne j1

j2:
"
}

make_fun("pentium_int32_zip_add") {
puts"
mov ecx,[ebp+8]
mov edi,[ebp+12]
mov esi,[ebp+16]

j10:
mov eax,[esi]
add [edi],eax
add esi,4
add edi,4
dec ecx
test ecx,3
jne j10

test ecx,ecx
je j12

j11:
mov eax,[esi]
mov edx,[esi+4]
add [edi],eax
add [edi+4],edx
mov eax,[esi+8]
mov edx,[esi+12]
add [edi+8],eax
add [edi+12],edx
add esi,16
add edi,16
sub ecx,4
jne j11

j12:
"}
