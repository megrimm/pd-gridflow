# this file will not contain any aliases, just the canonical names

proc say2 {k v} {
	say [lindex $k 0] $v
	foreach kk [lrange $k 1 end] {say $k "old name of $k : $v"}
}

proc say3 {k v} {
	set kk [regsub ^# $k @]
	say2 [list k kk] $v
}

category "Stuff"
say #                "plain numeric operators on grids: + - * / etc"
say #border          "add padding on sides of a grid"
say #cast            "convert grid from one number type to another"
say #centroid        "find centroid (weighted average) of the coordinates of a grid"
say #convolve        "compute convolution product of a grid (blur and edge-detection)"
say #dim             "get the size (dimensions) of a grid"
say #downscale_by    "reduce the size of an image by a whole factor"
say #draw_image      "picture-in-picture"
say #draw_points     "(future use)"

category "Data Conversion"
say #to_literal       "convert grid to grid-literal (list with a # sign)"
say #to_float        "convert grid to sequence of floats"
say #to_list         "convert grid to list"
say #to_pix          "convert grid to pix (GEM)"
say #to_pdp          "convert grid to pdp image/*/*"
say #to_symbol       "convert grid of ASCII codes to symbol"
say #to~             "convert grid to signal"
say #from_pix        "convert pix (GEM) to grid"
say #from_pdp        "convert pdp image/*/* to grid"
say gemdead          "fake \[gemhead\] for use with \[#to_pix\] without having to use \[gemwin\]"

category "Stuff"
say #fft             "compute forward or inverse one-or-two-dimensional complex FFT of a grid"
say #finished        "bang when grid transmission has ended"
say #fold            "compute the sum of each row, product of each row, and other similar operations"
say #for             "make a grid from all numbers or coordinates in a certain range"
say #grade           "make an index of the sorting of a grid"
say #import          "convert float, list, or symbol ASCII codes, to a grid"
say #inner           "scalar (\"dot\") product, matrix product, tensor contraction, image channel remapping, etc."

category "Hardware and Files"
say #camera          "control panel for opening cameras"
say #io.aalib        "open an aalib window"
say #io.dc1394       "open a faiawaia \"DC\" camera (not DV) using a Linux-compatible OS"
say #io.grid         "read or write a .grid file (GridFlow storage format)"
say #io.jpeg         "read or write a .jpeg file"
say #io.mpeg         "read a .mpeg video file"
say #io.png          "read a .png image file"
say #io.ppm          "read a .pbm or .pgm or .ppm image file or write a .ppm image file"
say #io.quartz       "open a Quartz window (OSX)"
say #io.quicktimeapple "read a .mov video file (OSX)"
say #io.quicktimecamera "open a QuickTime Sequence Grabber (Camera / Video input) device"
say #io.quicktimehw  "read a .mov or .avi video file (Linux)"
say #io.sdl          "open a SDL window (Windows,Linux,OSX)"
say #io.videodev     "open a V4L1 device (Linux-only interface for video cameras and video digitisers)"
say #io.x11          "open a X11 window (Linux,etc)"
say parallel_port    "send to and receive from a DB25 parallel port"
say plotter_control  "make HPGL commands"

category "Stuff"
say #labelling       "tag connected pixels with region numbers in a two-tone single-channel image"
say #layer           "layer two same-sized images"
say #moment          "find 1st or 2nd order moment (weighted average or variance) of the coordinates of a grid"
say #noise_gate_yuvs "replaces dark pixels by black pixels in signed YUV images"
say #outer           "apply numeric operator on all possible combinations of elements of one grid with elements of another"
say #pack            "combine floats on separate inlets to make a grid"
say #perspective     "divide each point by its depth"
say #print           "print to console"
say #redim           "change the size of a grid by restreaming contents into a new shape"
say #reverse         "mirror image of a grid along a dimension"
say #rotatificator   "make rotation matrix for any two dimensions chosen from a space of any number of dimensions"
say #scale_by        "reduce the size of an image by a whole factor"
say #scan            "compute the cumulative sums of each row, and other similar operations"
say #store           "store image in RAM, in-place picture-in-picture, and make lookups in various ways"
say #transpose       "swap two dimensions out of any, in a grid"
say #type            "get a symbol representing the number type of a grid"
say #unpack          "split a grid into floats on separate outlets"
say #join            "join two grids together along any dimension"

category "Lists"
say foreach          "convert a list to a sequence of atom messages"
say listfind         "find index of an element in a list"
say listread         "find element at an index in a list"
say listflatten      "merge all nested lists together, depth-first"
say listreverse      "mirror image of a list"

category "Stuff"
say args             "pick up the arguments of an abstraction instance, including nested lists and init-messages"
say setargs          "set the arguments of an abstraction instance"
say attr             "dictionary to be used for storing attributes of abstractions, among other things"
say gf/propertybang  "bang when right-click properties"
say gf/object_bbox   "find bounding box of object in canvas"
say ascii            "write integer as decimal in ascii codes"
say class_exists     "figure out whether a class has been loaded by pd"
say display          "\[display\]: print message or grid inside of the patch"
say gf/error         "emit error message from the perspective of the current abstraction instance in its parent patch"
say gf/suffix_lookup "find the objectclass corresponding "
say range            "multiple moses in cascade"
say receives         "multiple receives with common outlet and other outlet telling the name of intended destination"
say route2           "route messages but keep them intact (does not remove selector)"
say shunt            "demultiplexer: send input to separately specified outlet"
say systemtime       "time spent by process in kernel mode, as measured by the OS"
say tsctime          "high-resolution real time, as measured by the CPU"
say unix_time        "real time as measured by the OS, including date"
say usertime         "time spent by process in non-kernel mode, as measured by the OS"

category "Stuff"
say #apply_colormap_channelwise "apply color correction tables separately on each channel"
say #background_model "make mask from learning to distinguish background from foreground"
say #change           "send grid only if different from previous grid"
say #checkers         "make image of chequered background in two tones of grey"
say #clip             "min and max"
say #color            "GUI for selecting a colour"
say #contrast         "adjust contrast in two different ways"

say #fade_lin         "fade in piecewise-linear fashion"
say #fade             "fade in exponential-decay fashion (linear recurrence)"
say #lop_space        "fade in spatially (up, down, left, right, etc) by IIR filtering"
say #fastblur         "speedy shortcut for rectangular blur"

say for               "make sequence of float messages for each number in a range with specified stepping"
say fps               "measure frames per second and make statistics"
say #gamma            "apply gamma correction"
say gf/io_generate    "for internal use by #in and #out"
say #hueshift         "apply hue shift by rotating the color wheel"

say #in               "open file or device for reading or download"
say #in~              "open file or device for reading or download, with sound (experimental)"
say #out              "open file or device for writing or upload"

say inv*              "swapped /"
say inv+              "swapped -"

say #moment_polar     "convert covariance matrix to the longest and shortest radius of an ellipse and a rotation angle"
say #motion_detection "frame difference with some options"
say #mouse            "converts mouse events to reports of clicks, drags, unclicks, motions, and separate buttons and wheel"
say gf/oneshot        "spigot that shuts itself down after each message"
say pingpong          "turns value of a counter into a zigzag between 0 and a given value"

category "Polygons"
say #polygon_area       "find area of a polygon in square pixels"
say #polygon_comparator "find similarity between two polygons independently of rotation, by radial maps and FFT"
say #polygon_each_edge  "convert a polygon to a sequence of overlapping 2-sided polygons representing edges"
say #polygon_moment     "find average of all points inside of a polygon"
say #polygon_perimetre  "find perimetre of a polygon in pixels (euclidian)"
say #polygon_radial_map "find radius of a polygon from a given origin, sampled at equally spaced angles"
say #line_to_polygon  "convert line (as point pair) to polygon (rotated rectangle)"
say #draw_rect        "draw a rectangle in an image"
say #draw_slider      "draw a slider in an image"
say #make_cross       "make cross-shaped polygon"
say #draw_polygon    "draw polygon in an image"

category "Stuff"
say #posterize        "quantise pixel values"
say #ravel            "do #redim so that a grid keeps same number of elements but just one dimension"
say #record           "wrapper around \[#in quicktime\]"
say #remap_image      "apply object chain on pixel positions to make new image from chosen pixels of the input image"
say #rotate           "rotate points through two axes (or rotate pixels as points in a colorspace)"
say #saturation       "multiply chroma by some value"
say #scale_to         "scale an image from one size to any other size by deleting or duplicating rows and columns"
say #seq_fold         "cascade the use of an object on all elements of an incoming grid message sequence"
say seq_fold          "cascade the use of an object on all elements of an incoming message sequence"
say #slice            "crop an image using a start point (top left) and end point (bottom right)"
say #solarize         "like pingpong but on all pixel values of a grid"
say #sort             "sort each row of a grid"
say #spread           "add noise to each vector (point or pixel)"
say #swap             "like \[swap\] for grids"
say #text_to_image    "use a fixed-width font grid to make a tiling of characters as specified by a text string"
say #t                "like \[t a a\] for grids"
say var.#             "like \[f\] for grids"

category "Colorspace Conversion"
say #rgb_to_yuv       "convert RGB to unsigned YUV"
say #yuv_to_rgb       "convert unsigned YUV to RGB"
say #rgb_to_rgba      "convert RGB to RGBA (but setting alpha to 0)"
say #rgba_to_rgb      "convert RGBA to RGB"
say #greyscale_to_rgb "convert greyscale to RGB"
say #rgb_to_greyscale "convert RGB to greyscale"

category "OpenCV"
say cv/#Add           "OpenCV addition"
say cv/#Div           "OpenCV division"
say cv/#Mul           "OpenCV multiplication"
say cv/#Sub           "OpenCV subtraction"
say cv/#And           "OpenCV bitwise AND"
say cv/#Or            "OpenCV bitwise OR"
say cv/#Xor           "OpenCV bitwise XOR"
say cv/#Invert        "OpenCV invert matrix"
say cv/#SVD           "OpenCV singular value decomposition (eigendecomposition)"
say cv/#Ellipse       "OpenCV draw ellipse"
say cv/#KMeans        "OpenCV K-Means clusteriser"
say cv/#HaarDetectObjects "OpenCV (future use)"
#say cv/#Kalman        "OpenCV (future use)"
say cv/#ApproxPoly    "OpenCV polygon approximator"
say cv/#CornerHarris  "OpenCV Harris corner-detector"

category "Stuff"
say ascii_to_f       "converts a list of ascii codes to a float"
say plotter_parser   "interprets ascii codes as HPGL commands and output them as messages"
say list.==          "test two lists of floats and/or symbols for equality"
say expect           "currently does like list.== (will do more than that in the future)"
say #hello           "make 7 colour bars"
say #window          "a \[#out window\] that can be toggled to appear and disappear"

say #cluster_avg "computes several averages at once according to a table of indices"
say #draw_hpgl "plot lines given in HPGL format, using \[#draw_polygon\]"
say #extract_diagonal "extract the main diagonal from a matrix"
say #reinterval "change the scale of values from one interval to another"
say hpgl_find_bbox "find the bounding box of a sequence of hpgl commands"
say hpgl_font_render "include hpgl files from disk for drawing text"
say hpgl_op "use \[#\] on hpgl commands"

say hpgl_track_position "remember last mentioned hpgl coordinate"
say interval_overlap    "test whether two intervals of floats overlap"
say norecurse           "simple spigot for preventing control-recursion"
say #make_arrow         "make an arrow \"polygon\" from 2 points (for use with line mode of \[#draw_polygon\])"
say #many               "\[#many\]: create and organise many identical GUI objects"
say #many-prop          "properties dialogue for \[#many\]"
say #see                "\[#see\]: view video output within patch and collect mouse/key info"
say #to_iem             "convert grid(3) to IEMGUI colour code"
say qwerty_piano        "imitation of \[notein\] using \[key\] and \[keyup\]"
say doremi              "\[doremi\]: gui object for displaying midi notes"
say gf/mouse_spy        "tell mouse/key events of a single patch window in \[#out window\] format"

# never finished (2007)
if 0 {
  say cv/#CalcOpticalFlowBM
  say cv/#CalcOpticalFlowHS
  say cv/#CalcOpticalFlowLK
  say cv/#CalcOpticalFlowPyrLK
}

category "GFDP" ;# many of them can't even be listed normally in the doc index
say doc_add      "add a \[doc_m\] in the parent of the parent canvas"
say doc_also     "GFDP subheader for listing related classes"
say doc_below    "instruct \[doc_layout\] to put a GFDP element below another one"
say doc_bottom   "find the bottom of a GFDP element"
say doc_c        "GFDP subheader for creation arguments documentation"
say doc_cc       "GFDP subsubheader for creation arguments documentation"
say doc_demo     "header of an example patch"
say doc_editmode "automatically move \[cnv\] and \[bng\] when switching from/to edit mode"
say doc_exist    "check whether a certain GFDP component already exists in the help patch"
say doc_f        "footer of a GFDP help patch"
say doc_h        "header of a GFDP help patch"
say doc_i        "GFDP subheader for inlet documentation"
say doc_ii       "GFDP subsubheader for inlet documentation"
say doc_layout   "enforce correct layout of the abstraction containing it, in the parent's abstraction"
say doc_m        "GFDP subsubsubheader for one method or one creation argument"
say doc_make     "add GFDP subsubheaders in the parent of the parent canvas"
say doc_o        "GFDP subheader for outlet documentation"
say doc_oo       "GFDP subsubheader for outlet documentation"
say doc_same     "GFDP pseudo-comment for saying a method is same as a creation argument"
say doc_accolade "GFDP accolade"
say doc_link     "GFDP hyperlink for opening another helpfile"

# experimental new stuff

say gf/nbxhsl "combined \[nbx\] and \[hsl\] boxes as used by \[#camera\]"
say gf/not_open "used by \[#in\] \[#in~\] \[#out\] to represent closed state"

# #io.quartz #to_array doc_make inv0x2a inv0x2b memstat

say gf/canvas_count      "tell total number of objects in a canvas"
say gf/canvas_dollarzero "tell the \$0 of an uplevel canvas"
say gf/canvas_edit_mode  "tell the edit mode of a canvas"
say gf/canvas_filename   "tell the filename of a canvas"
say gf/canvas_getpos     "tell the position of a canvas in its parent canvas"
say gf/canvas_hehehe     "resize window automatically"
say gf/canvas_hohoho     "draw dashed box"
say gf/canvas_index      "tell the index of a canvas in its parent canvas"
say gf/canvas_isselected "tell whether a canvas is selected in its parent canvas"
say gf/canvas_loadbang   "send loadbang to the most recently created objects of a canvas"
say gf/canvas_setgop     "set GOP options of a canvas"
say gf/canvas_setpos     "set the position of a canvas in its parent canvas"
say gf/canvas_xid        "tell the x11 id of a canvas, its window, and tell the tk id of a canvas"
say gf/find_file         "find a file the same way that \[#in\] does"
say gf/getcwd            "tell the current working directory (as set by the \"cd\" shell command)"
say gf/getpid            "tell the process id of the pd server"
say gf/lol               "make wires dashed or invisible, reposition and measure height of comments, etc."
say gf/selector          "report the true selector of the incoming message"
say gf/string_<          "compare two strings"
say gf/string_replace    "search and replace substrings in a symbol"
say gf/string_length     "measure the length of a string (in bytes)"
say gridflow             "get GridFlow's version number, folder, and the name of the OS"
if 0 {
say memstat
say setargs
}

# 9.11
say route3        "like route, but the selector is only replaced by 'list' instead of \$1"
say #type-gui     "\[#type-gui\]: a hradio or vradio for selecting a type for use by 'cast' methods"
say #tabread      "for doing many tabreads at once, from a grid to a grid"
say #tabwrite     "for doing many tabwrites at once, from two grids"
say #from~        "turn several signals into a sequence of multichannel grids"
say gf/tk_button  "Tcl/Tk button available on the canvas"
say gf/sys_gui    "send internal Tcl/Tk commands from pd server to pd client"
say gf/wrap       "another wrap like pd's wrap and zexy's wrap"
say gf/l2s        "another list-to-symbol converter"
say gf/s2l        "another symbol-to-list converter"
say gf/sprintf    "the most complete wrapper of sprintf"
say #sprintf      "a version of gf/sprintf that directly produces a grid"
say gf/gl         "OpenGL interface as simpler alternative to many of GEM's classes"
say gf/class_info "query info from GF's external classes (not abstractions)"
say doc_iemfont   "figure out correct font size to use with IEMGUI widgets"

# 9.12
say #expr         "an \[expr\] clone that will eventually support grids too"
say #compress     "pick a set of values in a grid"
