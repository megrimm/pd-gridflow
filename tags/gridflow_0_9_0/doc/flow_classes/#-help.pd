#N canvas 0 26 1001 659 10;
#X text 13 44 for all of these \, A refers to the left inlet and B
to the value on the right.;
#X obj 479 70 #color;
#X obj 654 70 #color;
#X obj 437 90 r op;
#X text 86 208 A;
#X text 86 227 B;
#X text 69 402 if A is zero then;
#X text 70 416 B else A;
#X obj 13 457 s op;
#X text 69 430 if A is zero then;
#X msg 25 436 op &&;
#X text 70 444 zero else B;
#X obj 13 606 s op;
#X msg 37 558 op min;
#X text 86 553 the lowest value;
#X text 87 565 in A \, B;
#X msg 37 581 op max;
#X text 86 587 in A \, B;
#X text 86 576 the highest value;
#X msg 24 488 op abs-;
#X text 86 488 absolute value of (A-B);
#X obj 257 552 s op;
#X msg 257 533 op rand;
#X text 320 547 number below A;
#X text 319 532 randomly produces a non-negative;
#X msg 267 575 op sqrt;
#X text 323 568 square root of A;
#X text 324 583 rounded downwards;
#X obj 13 532 s op;
#X msg 24 509 op sq-;
#X text 87 508 (A-B) times (A-B);
#X obj 256 622 s op;
#X msg 267 598 op hypot;
#X text 335 598 square root of (A*A+B*B);
#X text 585 31 select values below;
#X text 14 127 select an operator below;
#X text 478 51 A;
#X text 653 51 B;
#X obj 479 136 # +;
#X obj 464 183 #color;
#X obj 681 150 #unpack 3;
#X floatatom 681 170 5 0 0 0 - - -;
#X obj 642 150 t a a;
#X obj 643 186 display;
#X msg 25 408 op ||;
#X obj 333 160 display;
#X text 861 23 GridFlow 0.8.3;
#X text 15 14 Numeric Operators:;
#X text 15 27 Consult doc/architecture.html to see a table of all of
them.;
#X text 14 73 angles are in hundredths of degrees \, so a full circle
(two pi radians) is 36000 you can convert from radians to our angles
by multiplying by 18000/pi.;
#X msg 36 227 op put;
#X msg 15 207 op ignore;
#N canvas 0 0 450 300 bitwise_numops 0;
#X text 106 54 A or B \, bitwise;
#X text 99 76 A xor B \, bitwise;
#X msg 45 74 op ^;
#X msg 45 96 op &;
#X text 100 98 A and B \, bitwise;
#X text 100 120 A * (2**(B % 32);
#X obj 25 170 s op;
#X text 100 150 A / (2**(B % 32);
#X msg 45 118 op <<;
#X msg 45 147 op >>;
#X msg 45 52 op |;
#X text 99 135 left-shifting;
#X text 99 164 right-shifting;
#X connect 2 0 6 0;
#X connect 3 0 6 0;
#X connect 8 0 6 0;
#X connect 9 0 6 0;
#X connect 10 0 6 0;
#X restore 11 322 pd bitwise_numops (5);
#N canvas 0 0 450 300 comparator_numops 0;
#X msg 40 33 op cmp;
#X text 87 22 -1 when A<B;
#X text 94 50 1 when A>B;
#X text 94 36 0 when A=B;
#X msg 40 66 op ==;
#X text 97 67 is A equal to B ?;
#X text 97 79 1 = true \, 0 = false;
#X msg 40 93 op !=;
#X text 97 94 is A not equal to B ?;
#X msg 41 114 op >;
#X text 98 115 is A greater than B ?;
#X msg 41 137 op <=;
#X text 98 138 is A not greater than B ?;
#X msg 41 158 op <;
#X text 98 159 is A less than B ?;
#X obj 20 203 s op;
#X msg 41 179 op >=;
#X text 98 180 is A not less than B ?;
#X connect 0 0 15 0;
#X connect 4 0 15 0;
#X connect 7 0 15 0;
#X connect 9 0 15 0;
#X connect 11 0 15 0;
#X connect 13 0 15 0;
#X connect 16 0 15 0;
#X restore 11 342 pd comparator_numops (7);
#N canvas 0 0 450 447 trigonometric&exponential_numops 0;
#X msg 56 142 op sin*;
#X text 126 144 B * sin(A);
#X msg 56 162 op cos*;
#X text 127 165 B * cos(A);
#X text 127 184 arctan(A/B);
#X msg 56 56 op log*;
#X text 198 47 in base e;
#X msg 56 77 op gamma;
#X obj 22 100 s op;
#X msg 56 98 op **;
#X text 125 96 A**B;
#X text 125 107 A raised to power B;
#X obj 39 120 bng 15 250 50 0 empty empty empty 0 -6 0 8 -258699 -1
-1;
#X msg 56 120 op erf;
#X text 124 123 integral of e^(-x*x)dx;
#X msg 55 15 op tanh*;
#X obj 12 166 s op;
#X msg 55 35 op exp*;
#X text 127 77 floor(pow(a/256 \, 256/b)*256);
#X text 115 256 B * sin(A);
#X text 116 277 B * cos(A);
#X msg 56 182 op atan;
#X text 60 222 FLOAT ONLY \, IN RADIANS:;
#X msg 56 255 op sin;
#X msg 56 275 op cos;
#X msg 56 295 op tanh;
#X msg 56 315 op exp;
#X msg 56 335 op log;
#X msg 56 355 op atan2;
#X text 115 296 B * sin(A);
#X text 116 317 B * cos(A);
#X text 125 16 B * tanh(A);
#X text 126 36 B * exp(A);
#X text 126 57 B * log(A);
#X text 117 354 arctan(A/B);
#X text 117 337 B * log(A);
#X obj 16 381 s op;
#X connect 0 0 16 0;
#X connect 2 0 16 0;
#X connect 5 0 8 0;
#X connect 7 0 8 0;
#X connect 9 0 8 0;
#X connect 13 0 8 0;
#X connect 15 0 8 0;
#X connect 17 0 8 0;
#X connect 21 0 16 0;
#X connect 23 0 36 0;
#X connect 24 0 36 0;
#X connect 25 0 36 0;
#X connect 26 0 36 0;
#X connect 27 0 36 0;
#X connect 28 0 36 0;
#X restore 11 362 pd trigonometric&exponential_numops (15);
#X obj 11 246 s op;
#N canvas 0 0 450 300 addition_numops 0;
#X text 93 40 A + B;
#X text 94 60 A - B;
#X text 96 80 B - A;
#X msg 40 99 op avg;
#X msg 33 79 op inv+;
#X msg 55 59 op -;
#X msg 55 38 op +;
#X obj 24 123 s op;
#X text 84 99 (A+B)/2 average;
#X msg 40 205 op clip+;
#X text 108 205 A+B but output is clipped;
#X obj 22 253 s op;
#X msg 40 225 op clip-;
#X text 108 225 A-B but output is clipped;
#X text 28 178 IN THE FUTURE:;
#X connect 3 0 7 0;
#X connect 4 0 7 0;
#X connect 5 0 7 0;
#X connect 6 0 7 0;
#X connect 9 0 11 0;
#X connect 12 0 11 0;
#X restore 11 282 pd addition_numops (6);
#N canvas 102 91 450 428 multiplication_numops 0;
#X text 69 20 A * B;
#X text 65 47 rounded towards zero;
#X msg 25 162 op %;
#X text 61 158 A % B;
#X text 71 35 A / B;
#X text 94 182 B % A;
#X text 81 59 A / B;
#X text 80 71 rounded downwards;
#X text 90 83 B / A;
#X text 87 95 rounded towards 0;
#X text 108 115 rounded downwards;
#X text 109 104 B / A;
#X text 61 169 modulo (goes with div);
#X text 92 193 modulo (goes with div);
#X msg 30 186 op swap%;
#X msg 32 109 op swapdiv;
#X msg 42 214 op rem;
#X text 95 207 A % B;
#X text 117 245 B % A;
#X text 94 218 remainder;
#X text 95 229 (goes with /);
#X text 116 256 remainder;
#X text 115 267 (goes with /);
#X msg 36 253 op swaprem;
#X obj 14 135 s op;
#X obj 17 279 s op;
#X msg 32 88 op inv*;
#X msg 32 63 op div;
#X msg 32 39 op /;
#X msg 32 19 op *;
#X obj 20 360 s op;
#X text 87 323 greatest common divisor;
#X text 88 345 least common multiple;
#X msg 33 319 op gcd;
#X msg 33 339 op lcm;
#X connect 2 0 25 0;
#X connect 14 0 25 0;
#X connect 15 0 24 0;
#X connect 16 0 25 0;
#X connect 23 0 25 0;
#X connect 26 0 24 0;
#X connect 27 0 24 0;
#X connect 28 0 24 0;
#X connect 29 0 24 0;
#X connect 33 0 30 0;
#X connect 34 0 30 0;
#X restore 11 302 pd multiplication_numops (11);
#N canvas 564 174 450 239 vecops 1;
#X obj 13 199 s op;
#X msg 41 90 op C.sin;
#X msg 41 110 op C.cos;
#X msg 41 130 op C.tanh;
#X msg 41 150 op C.exp;
#X msg 41 170 op C.log;
#X text 15 18 Those are different from all the numops;
#X text 18 30 because they work on number pairs instead of individual
numbers.;
#X text 17 65 In particular \, the following work on complex numbers:
;
#X connect 1 0 0 0;
#X connect 2 0 0 0;
#X connect 3 0 0 0;
#X connect 4 0 0 0;
#X connect 5 0 0 0;
#X restore 11 382 pd vecops (5);
#X connect 1 0 38 0;
#X connect 1 0 42 0;
#X connect 2 0 38 1;
#X connect 3 0 38 0;
#X connect 10 0 8 0;
#X connect 13 0 12 0;
#X connect 16 0 12 0;
#X connect 19 0 28 0;
#X connect 22 0 21 0;
#X connect 25 0 31 0;
#X connect 29 0 28 0;
#X connect 32 0 31 0;
#X connect 38 0 39 0;
#X connect 38 0 45 0;
#X connect 40 0 41 0;
#X connect 42 0 43 0;
#X connect 42 1 40 0;
#X connect 44 0 8 0;
#X connect 50 0 55 0;
#X connect 51 0 55 0;
