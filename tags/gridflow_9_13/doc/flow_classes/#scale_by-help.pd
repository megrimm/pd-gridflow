#N canvas 690 0 632 610 10;
#X obj 11 82 tgl 15 0 empty empty empty 0 -6 0 8 -24198 -1 -1 0 1;
#X obj 11 102 metro 100;
#X obj 89 149 #in;
#X obj 103 561 #scale_to;
#X obj 169 561 #downscale_by;
#X text 232 507 Outputs the resulting scaled image.;
#X obj 89 207 #out window \, title #scale_by;
#X msg 89 85 open bluemarble.jpg \, bang;
#X obj 89 183 #scale_by 2;
#X text 7 28 The [#scale_by] scales the image received by the row and
column factors passed. A single value applies the scaling uniformly
on the row and columns.;
#X msg 227 129 2 # 2 1;
#X msg 230 152 2 # 2 3;
#X floatatom 181 131 5 0 0 0 - - -;
#X text 232 362 The Grid on which the scale_to will be performed.;
#X obj 0 0 doc_h;
#X obj 3 332 doc_i 2;
#X obj 3 477 doc_o 1;
#X text 232 265 The scaling factor (defaults to 2).;
#X obj 3 561 doc_also;
#X obj 14 507 doc_oo 0;
#X obj 14 362 doc_ii 0;
#X obj 14 445 doc_ii 1;
#X obj 14 265 doc_cc 0;
#X obj 97 362 doc_m i0 grid;
#X obj 97 265 doc_m c0 grid;
#X obj 97 445 doc_m i1 grid;
#X obj 3 235 doc_c 0..1;
#X obj 232 445 doc_same 0;
#X text 232 287 if it's a single value \, then that factor is to be
used for both rows and columns.;
#X text 232 384 duplicates each pixel several times in width and several
times in height \, where the number of times is determined by the factor
described above. twice those of the incoming grid. It is several times
faster.;
#X text 232 529 grid((factor*y) (factor*x) channels);
#X obj 97 507 doc_m o0 grid;
#X obj 0 581 doc_f;
#X connect 0 0 1 0;
#X connect 1 0 2 0;
#X connect 2 0 8 0;
#X connect 7 0 2 0;
#X connect 8 0 6 0;
#X connect 10 0 8 1;
#X connect 11 0 8 1;
#X connect 12 0 8 1;
#X connect 18 1 3 0;
#X connect 18 1 4 0;
#X connect 23 1 13 0;
#X connect 23 1 29 0;
#X connect 24 1 17 0;
#X connect 24 1 28 0;
#X connect 25 1 27 0;
#X connect 31 1 5 0;
#X connect 31 1 30 0;
